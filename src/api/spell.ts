export interface Spell {
  id: string;
  combo: string;
  image: string;
}

export interface CastResult {
  success: boolean;
  rank: string;
  cast_time_ms: number;
  spell: Spell;
}

const BASE_URL = "http://localhost:3001";

// üîÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–µ–ª–ª
export async function fetchSpell(): Promise<Spell> {
  const res = await fetch(`${BASE_URL}/spell`);
  if (!res.ok) throw new Error("Failed to fetch spell");
  return res.json();
}

// üß™ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
export async function castSpell(combo: string): Promise<CastResult | null> {
  const res = await fetch(`${BASE_URL}/cast`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(combo),
  });

  if (!res.ok) throw new Error("Failed to cast spell");
  const result = await res.json();
  return result ?? null;
}

// ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –æ—Ä–± (Q/W/E)
export async function sendInput(key: string): Promise<void> {
  const res = await fetch(`${BASE_URL}/input`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(key),
  });

  if (!res.ok) throw new Error("Failed to send input");
}

// ‚úÖ –í—ã–∑–≤–∞—Ç—å –∏–Ω–≤–æ–∫–∞—Ü–∏—é (–Ω–∞–∂–∞—Ç–∏–µ R)
export async function invokeSpell(): Promise<CastResult | null> {
  const res = await fetch(`${BASE_URL}/invoke`, {
    method: "POST",
  });

  if (!res.ok) throw new Error("Failed to invoke spell");
  const result = await res.json();
  return result ?? null;
}

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –æ—Ä–±–æ–≤ (["Q", "W", "E"])
export async function getInputBuffer(): Promise<string[]> {
  const res = await fetch(`${BASE_URL}/input/buffer`);
  if (!res.ok) throw new Error("Failed to fetch input buffer");
  return res.json();
}
